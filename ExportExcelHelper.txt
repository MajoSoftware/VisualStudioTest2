namespace Rabo.Saga.Util.ExcelExport
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Text;
    using DataTables;
    using Rabo.CRG.CRIS.BDS.Portal.Export.Core;

    public enum ExcelFormat
    {
        Csv = 1,
        Xls = 2,
        Xlsx = 3
    }

    /// <summary>
    /// GenericExcelHelper
    /// Can be called from a specific action in a view to do a excel Export.
    /// </summary>
    public class ExcelHelper
    {
        public const string XlsxContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        public const string XlsContentType = "application/ms-excel";
        public const string CsvContentType = "text/csv";

        public static byte[] ExportListToExcel<T>(ExcelFormat excelFormat, string outputFilename, IEnumerable<T> list, Dictionary<string, string> columnHeaders = null, bool ignoreDisplayNames = false)
        {
            DataTable table = DataTableHelper.ListToDataTable<T>(list, columnHeaders, ignoreDisplayNames);

            byte[] bytes = null;
            switch (excelFormat)
            {
                case ExcelFormat.Csv:
                    bytes = ExportDataTableToCsv(outputFilename, table, columnHeaders, ignoreDisplayNames);
                    break;
                case ExcelFormat.Xlsx:
                    bytes = ExportDataTableToXlsx(outputFilename, table, columnHeaders, ignoreDisplayNames);
                    break;
            }

            return bytes;
        }

        public static byte[] ExportDataTableToCsv(string outputFilename, DataTable table, Dictionary<string, string> columnHeaders = null, bool ignoreDisplayNames = false)
        {
            string fileContents = DataTableToCsv(table);

            // convert to byte array
            // use a different encoding if needed
            var encoding = new System.Text.UTF8Encoding();
            byte[] returnContent = encoding.GetBytes(fileContents);

            outputFilename = Path.GetFileName(outputFilename);
            if (!outputFilename.ToLower().EndsWith(".csv"))
            {
                outputFilename += ".csv";
            }

            return returnContent;
        }

        public static byte[] ExportDataTableToXlsx(string outputFilename, DataTable table, Dictionary<string, string> columnHeaders = null, bool ignoreDisplayNames = false)
        {
            byte[] filedata = null;
            string path = null;

            outputFilename = Path.GetFileName(outputFilename);
            if (!outputFilename.ToLower().EndsWith(".xlsx"))
            {
                outputFilename += ".xlsx";
            }

            // Sax Component export
            using (var excel = new ExcelSaxCore(new SaxExportHelper(), new SaxExportDataBinder()))
            {
                string worksheetName = Path.GetFileNameWithoutExtension(outputFilename);
                excel.AddWorksheet(table, worksheetName);

                path = excel.AbsoluteFilePath;
            }

            filedata = File.ReadAllBytes(path);
            if (path != null)
            {
                File.Delete(path);
            }

            return filedata;
        }

        private static string DataTableToCsv(DataTable table)
        {
            string result = string.Empty;

            StringBuilder sb = new StringBuilder();

            IEnumerable<string> columnNames = table.Columns.Cast<DataColumn>().
                                              Select(column => column.ColumnName);
            sb.AppendLine(string.Join(";", columnNames));

            foreach (DataRow row in table.Rows)
            {
                List<string> stringValuesList = new List<string>();
                for (int i = 0; i < row.ItemArray.Length; i++)
                {
                    object objectValue = row.ItemArray[i];
                    string stringValue = GetStringValueFromObject(objectValue);
                    stringValuesList.Add(stringValue);
                }

                sb.AppendLine(string.Join(";", stringValuesList));
            }

            result = sb.ToString();

            return result;
        }

        private static string GetStringValueFromObject(object objectValue)
        {
            string stringValue = string.Empty;
            CultureInfo culture = new CultureInfo("nl-NL"); // en-US

            switch (objectValue.GetType().FullName)
            {
                case "System.Decimal":
                    stringValue = ((decimal)objectValue).ToString("N", culture);
                    break;
                case "System.Double":
                    stringValue = ((double)objectValue).ToString("N", culture);
                    break;
                case "System.DateTime":
                    stringValue = ((DateTime)objectValue).ToString(culture);
                    break;

                default:
                    stringValue = objectValue.ToString();
                    break;
            }

            return stringValue;
        }
    }
}



// *************************************************************
/*

       [HttpGet]
        [AllowedRoles(RoleEnum.Reader, RoleEnum.ReaderSelected, RoleEnum.Editor, RoleEnum.EditorSelected, RoleEnum.PowerUser)]
        public FileResult ExportExcel(LoanFacilityFilter filter)
        {
            if (filter == null || filter.Reset)
            {
                filter = new LoanFacilityFilter(ProductStatusEnum.Active);
            }

            ModelState.Clear();
            AddModelData(filter);

            IPagedList<LoanFacilityModel> loanFacilities = _loanFacilityService.GetLoanFacilities(filter, 1, int.MaxValue);

            Dictionary<string, string> columnHeaders = new Dictionary<string, string>();
            columnHeaders.Add("ExternalId", "Loan facility ID");
            columnHeaders.Add("LendingEntityName", "Lending entity");
            columnHeaders.Add("BorrowingEntityName", "Borrowing entity");
            columnHeaders.Add("MaximumAmount", "Maximum amount");
            columnHeaders.Add("CurrencyCode", "Currency");
            columnHeaders.Add("AvailabilityEndDate", "Availability end date");
            columnHeaders.Add("MaximumTenorInMonths", "Tenor");
            columnHeaders.Add("AllocationExternalId", "Allocation");
            columnHeaders.Add("EffectiveDate", "Effective date");
            columnHeaders.Add("ExpiryDate", "Expiry date");
            columnHeaders.Add("RevisionDate", "Revision date");
            columnHeaders.Add("CreatedAt", "Last edit");

            string outputFilename = "LoanFacilities.xlsx";
            byte[] bytes = ExcelHelper.ExportListToExcel<LoanFacilityModel>(
                outputFilename,
                loanFacilities,
                columnHeaders,
                false);

            return File(bytes, ExcelHelper.XlsxContentType, outputFilename);
        }


=====================================================

@Html.RaboPanel("Allocations", new { data_export_excel = Url.Action("exportexcel", "allocations"), data_export = "excel" }).Content(
    @<text>
        <div class="rabopanel-content">
            <table class="portal-table clickable">
                <thead>
                    <tr>
                        <th title="Allocation ID">Allocation ID</th>
                        <th title="Allocated office">Allocated office</th>
                        <th title="Borrowing entity">Borrowing entity</th>
                        <th title="Product facility">Product facility</th>
                        <th title="Amount" class="number">Amount</th>
                        <th title="Currency" class="currency">Currency</th>
                        <th title="Maturity date" class="date">Maturity date</th>
                        <th title="Revision date" class="date">Revision date</th>
                        <th title="Last edit" class="date">Last edit</th>
                        @for (int i = 0; i < Model.AllocationActions.Count(); i++)
                        {
                            <th class="action"></th>
                        }
                    </tr>
                </thead>
                @foreach (var allocation in Model.Allocations)
                {
                    <tr data-url="@Url.Action("Detail", new { id = allocation.MasterId })">
                        <td title="@allocation.ExternalId">@allocation.ExternalId</td>
                        <td title="@allocation.AllocatedOfficeName">@allocation.AllocatedOfficeName</td>
                        <td title="@allocation.BorrowingEntityName">@allocation.BorrowingEntityName</td>
                        <td title="@allocation.ProductName">@allocation.ProductName</td>
                        <td title="@allocation.Amount.DisplayThousands()" class="number">@allocation.Amount.DisplayThousands()</td>
                        <td title="@allocation.CurrencyCode" class="currency">@allocation.CurrencyCode</td>
                        <td title="@allocation.AllocationEndDate.DisplayDate("N/A")" class="date">@allocation.AllocationEndDate.DisplayDate("N/A")</td>
                        <td title="@allocation.RevisionDate.DisplayDate()" class="date">@allocation.RevisionDate.DisplayDate()</td>
                        <td title="@allocation.CreatedAt.DisplayDate()" class="date">@allocation.CreatedAt.DisplayDate()</td>
                        @foreach (var action in Model.AllocationActions)
                        {
                            <td class="action">@action.Create(allocation)</td>
                        }
                    </tr>
                }
                <tfoot>
                    <tr>
                        <td colspan="10">
                            @Html.PagedListPager(Model.Allocations, Model.Filter)
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </text>)


*/

